1
===========================

			var dimensions = Console.ReadLine().Split(new[] { ' ', ',' }, StringSplitOptions.RemoveEmptyEntries).Select(int.Parse).ToArray();

			int rows = dimensions[0];
			int cols = dimensions[1];

			var matrix = new int[rows, cols];

			for (int row = 0; row < rows; row++)
			{
				var currentRow = Console.ReadLine().Split(new[] { ' ', ','}, StringSplitOptions.RemoveEmptyEntries).Select(int.Parse).ToArray();

				for (int col = 0; col < cols; col++)
				{
					matrix[row, col] = currentRow[col];
				}
			}

			Console.WriteLine(rows);
			Console.WriteLine(cols);
			//update! Console.WriteLine(matrix.Cast<int>().Sum());
			//without the bottom code
			int sum = 0;

			foreach(var item in matrix)
			{
				sum += item;
			}

			Console.WriteLine(sum);

2
===========================

			var dimensions = Console.ReadLine().Split(new[] { ' ', ',' }, StringSplitOptions.RemoveEmptyEntries).Select(int.Parse).ToArray();

			int rows = dimensions[0];
			int cols = dimensions[1];

			var matrix = new int[rows, cols];

			for (int row = 0; row < rows; row++)
			{
				var currentRow = Console.ReadLine().Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries).Select(int.Parse).ToArray();

				for (int col = 0; col < cols; col++)
				{
					matrix[row, col] = currentRow[col];
				}
			}

			for (int col = 0; col < cols; col++)
			{
				var sum = 0;

				for (int row = 0; row < rows; row++)
				{
					sum += matrix[row, col];
				}

				Console.WriteLine(sum);
			}

3
===========================

            int n = int.Parse(Console.ReadLine());
            int sum = 0;

            for (int i = 0; i < n; i++)
            {
                var row = Console.ReadLine()
                    .Split()
                    .Select(int.Parse)
                    .ToArray();

                sum += row[i];
            }

            Console.WriteLine(sum);

4
===========================

         int size = int.Parse(Console.ReadLine());

            var matrix = new char[size, size];

            for (int row = 0; row < matrix.GetLength(0); row++)
            {
                var input = Console.ReadLine();

                for (int col = 0; col < matrix.GetLength(1); col++)
                {
                    matrix[row, col] = input[col];
                }
            }

            var symbol = char.Parse(Console.ReadLine());

            for (int row = 0; row < matrix.GetLength(0); row++)
            {
                for (int col = 0; col < matrix.GetLength(1); col++)
                {
                    var currentSymbol = matrix[row, col];

                    if (currentSymbol == symbol)
                    {
                        var rowIndex = row;
                        var colIndex = col;

                        Console.WriteLine($"({rowIndex}, {colIndex})");
                        return;
                    }
                }
            }

            Console.WriteLine($"{symbol} does not occur in the matrix");

---------------------------

           int size = int.Parse(Console.ReadLine());

            char[,] matrix = new char[size, size];

            for (int i = 0; i < size; i++)
            {
                string input = Console.ReadLine();

                for (int j = 0; j < size; j++)
                {
                    matrix[i, j] = input[j];
                }
            }

            char toFind = char.Parse(Console.ReadLine());

            for (int i = 0; i < size; i++)
            {
                for (int j = 0; j < size; j++)
                {
                    if (matrix[i, j] == toFind)
                    {
                        Console.WriteLine($"({i}, {j})");
                        return;
                    }
                }
            }

            Console.WriteLine($"{toFind} does not occur in the matrix");

5
===========================

			var dimensions = Console.ReadLine().Split(new[] { ' ', ',' }, StringSplitOptions.RemoveEmptyEntries).Select(int.Parse).ToArray();

			int rows = dimensions[0];
			int cols = dimensions[1];

			var matrix = new int[rows, cols];

			for (int row = 0; row < rows; row++)
			{
				var currentRow = Console.ReadLine().Split(new[] { ' ', ',' }, StringSplitOptions.RemoveEmptyEntries).Select(int.Parse).ToArray();

				for (int col = 0; col < cols; col++)
				{
					matrix[row, col] = currentRow[col];
				}
			}

			int maxSum = int.MinValue;
			int maxRowIndex = 0; //-1
			int maxColIndex = 0; //-1

			for (int row = 0; row < matrix.GetLength(0) - 1; row++)
			{
				for (int col = 0; col < matrix.GetLength(1) - 1; col++)
				{
					int currentSum = matrix[row, col] +
								matrix[row, col + 1] +
								matrix[row + 1, col] +
								matrix[row + 1, col + 1];
						
					if(currentSum > maxSum)
					{
						maxSum = currentSum;
						maxRowIndex = row;
						maxColIndex = col;
					}
				}
			}

			Console.WriteLine($"{matrix[maxRowIndex, maxColIndex]} {matrix[maxRowIndex, maxColIndex + 1]}");
			Console.WriteLine($"{matrix[maxRowIndex + 1, maxColIndex]} {matrix[maxRowIndex + 1, maxColIndex + 1]}");
			Console.WriteLine(maxSum);

6
===========================

			int rows = int.Parse(Console.ReadLine());
			int[][] jaggedArray = new int[rows][];

			for (int row = 0; row < rows; row++)
			{
				int[] currentRow = Console.ReadLine().Split().Select(int.Parse).ToArray();
				jaggedArray[row] = new int[currentRow.Length];

				for (int col = 0; col < currentRow.Length; col++)
				{
					jaggedArray[row][col] = currentRow[col]; // currentRow[col] vurvu po kolonki(vertikalno) ot lqvo na dqsno
				}
			}

			while (true)
			{
				string input = Console.ReadLine();

				if (input == "END")
				{
					break;
				}

				string[] commandParts = input.Split().ToArray();
				string command = commandParts[0];
				int commandRow = int.Parse(commandParts[1]);
				int commandCol = int.Parse(commandParts[2]);
				int value = int.Parse(commandParts[3]);

				if ((commandRow < 0 || commandRow >= jaggedArray.Length) ||
					(commandCol < 0 || commandCol >= jaggedArray[commandRow].Length))
				{
					Console.WriteLine("Invalid coordinates");
					continue;
				}

				if (command == "Add")
				{
					jaggedArray[commandRow][commandCol] += value;
				}
				else if (command == "Subtract")
				{
					jaggedArray[commandRow][commandCol] -= value;
				}
			}

			foreach (var row in jaggedArray)
			{
				Console.WriteLine(string.Join(" ", row));
			}

7
===========================

			int rows = int.Parse(Console.ReadLine());
			long[][] pascalArr = new long[rows][];
			pascalArr[0] = new long[1];
			pascalArr[0][0] = 1;

			for (int row = 1; row < rows; row++)
			{
				pascalArr[row] = new long[row + 1];
				pascalArr[row][0] = 1;
				pascalArr[row][pascalArr[row].Length - 1] = 1;

				for (int col = 1; col < pascalArr[row].Length - 1; col++)
				{
					pascalArr[row][col] = pascalArr[row - 1][col] +
						pascalArr[row - 1][col - 1];
				}
			}

			foreach (var row in pascalArr)
			{
				Console.WriteLine(string.Join(" ", row));
			}

---------------------------

            int n = int.Parse(Console.ReadLine());
            long[][] jaggedArray = new long[n][];

            for (int i = 0; i < jaggedArray.Length; i++)
            {
                jaggedArray[i] = new long[i + 1];
                jaggedArray[i][0] = 1;
                jaggedArray[i][i] = 1;
            }

            for (int row = 2; row < jaggedArray.Length; row++)
            {
                for (int col = 1; col < jaggedArray[row].Length - 1; col++)
                {
                    jaggedArray[row][col] = jaggedArray[row - 1][col - 1] + jaggedArray[row - 1][col];
                }
            }

            for (int i = 0; i < jaggedArray.Length; i++)
            {
                Console.WriteLine(string.Join(" ", jaggedArray[i]));
            }