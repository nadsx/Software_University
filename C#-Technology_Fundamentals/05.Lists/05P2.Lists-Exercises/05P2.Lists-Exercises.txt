Trick!!!
numbers.Sort((a, b) => b - a);

1
===============================

                        List<int> wagons = Console.ReadLine().Split().Select(int.Parse).ToList();
			int capacityOfWagon = int.Parse(Console.ReadLine());

			string input = Console.ReadLine();

			while(input != "end")
			{
				List<string> tokens = input.Split().ToList();
				string command = tokens[0];

				if(command == "Add")
				{
					int numberOfPassengers = int.Parse(tokens[1]);

					wagons.Add(numberOfPassengers);
				}
				else
				{
					int passengersToFit = int.Parse(tokens[0]);

					for (int i = 0; i < wagons.Count; i++)
					{
						if(wagons[i] + passengersToFit <= capacityOfWagon)
						{
							wagons[i] += passengersToFit;
							break;
						}
					}
				}

				input = Console.ReadLine();
			}

			Console.WriteLine(string.Join(" ", wagons));
2
===============================

List<int> numbers = Console.ReadLine().Split().Select(int.Parse).ToList();

			string input = Console.ReadLine();

			while(input != "end")
			{
				string[] tokens = input.Split();
				string command = tokens[0];

				switch (command)
				{
					case "Delete":
						int elementToRemove = int.Parse(tokens[1]);

						numbers.RemoveAll(x => x == elementToRemove);
						break;
					case "Insert":
						int element = int.Parse(tokens[1]);
						int position = int.Parse(tokens[2]);

						numbers.Insert(position, element);
						break;
				}

				input = Console.ReadLine();
			}

			Console.WriteLine(string.Join(" ", numbers));
3
===============================

int numberOfCommands = int.Parse(Console.ReadLine());

			var guests = new List<string>();

			for (int i = 0; i < numberOfCommands; i++)
			{
				string[] tokens = Console.ReadLine().Split();
				string name = tokens[0];

				if(tokens.Length == 3)
				{
					if (!guests.Contains(name))
					{
						guests.Add(name);
					}
					else
					{
						Console.WriteLine($"{name} is already in the list!");
					}
				}
				else if(tokens.Length == 4)
				{
					if (guests.Contains(name))
					{
						guests.Remove(name);				
					}
					else
					{
						Console.WriteLine($"{name} is not in the list!");
					}
				}
			}

			foreach(var person in guests)
			{
				Console.WriteLine(person);
			}
4
===============================

List<int> numbers = Console.ReadLine().Split().Select(int.Parse).ToList();

			string input = Console.ReadLine();

			while(input != "End")
			{
				string[] tokens = input.Split();
				string command = tokens[0];

				switch (command)
				{
					case "Add":
						int number = int.Parse(tokens[1]);

						numbers.Add(number);
						break;
					case "Insert":
						int index = int.Parse(tokens[2]);
						number = int.Parse(tokens[1]);

						if (index >= 0 && index < numbers.Count)
						{
							numbers.Insert(index, number);
						}
						else
						{
							Console.WriteLine("Invalid index");
						}
						break;
					case "Remove":
						index = int.Parse(tokens[1]);
						
						if(index >= 0 && index < numbers.Count)
						{
							numbers.RemoveAt(index);
						}
						else
						{
							Console.WriteLine("Invalid index");
						}
						break;
					case "Shift":
						string direction = tokens[1];
						int count = int.Parse(tokens[2]);
					
						if(direction == "left")
						{
							for (int i = 0; i < count; i++)
							{
								int firstNumber = numbers[0];

								numbers.Add(firstNumber);
								numbers.RemoveAt(0);								
							}
						}
						else if(direction == "right")
						{
							for (int i = 0; i < count; i++)
							{
								numbers.Insert(0, numbers[numbers.Count - 1]);
								numbers.RemoveAt(numbers.Count - 1);
							}
						}					
						break;					
				}

				input = Console.ReadLine();
			}

			Console.WriteLine(string.Join(" ", numbers));
5
===============================

static void Main(string[] args)
		{
			List<int> numbersList = Console.ReadLine().Split().Select(int.Parse).ToList();
			int[] operations = Console.ReadLine().Split().Select(int.Parse).ToArray();

			int bombNumber = operations[0];
			int range = operations[1];

			DetonateBombNumber(numbersList, bombNumber, range);

			Console.WriteLine(numbersList.Sum());
		}

		private static void DetonateBombNumber(List<int> numbersList, int bombNumber, int range)
		{
			while (numbersList.Contains(bombNumber))
			{
				int currentBombIndex = numbersList.IndexOf(bombNumber);

				int startIndex = currentBombIndex - range < 0 ?
					0 : currentBombIndex - range;

				int endIndex = currentBombIndex + range >= numbersList.Count ?
					numbersList.Count - 1 : currentBombIndex + range;

				int numberOfElementsToRemove = endIndex - startIndex;

				for (int i = 0; i <= numberOfElementsToRemove; i++)
				{
					numbersList.RemoveAt(startIndex);
				}
			}
		}
		
-------------------------------------------------

            List<int> numbers = Console.ReadLine().Split().Select(int.Parse).ToList();
			int[] operations = Console.ReadLine().Split().Select(int.Parse).ToArray();

			int bomb = operations[0];
			int range = operations[1];

			for (int i = 0; i < numbers.Count; i++)
			{
				int currentNumber = numbers[i];

				if(currentNumber == bomb)
				{
					int startIndex = i - range;
					int endIndex = i + range;

					if(startIndex < 0)
					{
						startIndex = 0;
					}

					if(endIndex > numbers.Count - 1)
					{
						endIndex = numbers.Count - 1;
					}

					numbers.RemoveRange(startIndex, endIndex - startIndex + 1); //+1 bomb

					i = startIndex - 1;
				}
			}

			int sum = numbers.Sum();

			Console.WriteLine(sum);
			
------------------------------------------------------

            List<int> numbers = Console.ReadLine().Split().Select(int.Parse).ToList();
			int[] operations = Console.ReadLine().Split().Select(int.Parse).ToArray();

			int bombNumber = operations[0];
			int power = operations[1];

			while (numbers.Contains(bombNumber))
			{
				int positionOfBombNumber = numbers.IndexOf(bombNumber);

				if(positionOfBombNumber - power < 0)
				{
					numbers.RemoveRange(0, 1 + power + positionOfBombNumber);
				}
				else if(positionOfBombNumber + power > numbers.Count)
				{
					numbers.RemoveRange(positionOfBombNumber - power,
						power + 1 + numbers.Count - 1 - positionOfBombNumber);	// - skipnatite			
				}
				else
				{
					numbers.RemoveRange(positionOfBombNumber - power, 2 * power + 1);
				}
			}

			int sum = numbers.Sum();
			Console.WriteLine(sum);
					
6
===============================
List<int> firstPlayerCards = Console.ReadLine().Split().Select(int.Parse).ToList();
			List<int> secondPlayerCards = Console.ReadLine().Split().Select(int.Parse).ToList();

			while (true)
			{
				if (firstPlayerCards[0] > secondPlayerCards[0])
				{
					firstPlayerCards.Add(firstPlayerCards[0]);
					firstPlayerCards.Add(secondPlayerCards[0]);
				}
				else if (firstPlayerCards[0] < secondPlayerCards[0])
				{
					secondPlayerCards.Add(secondPlayerCards[0]);
					secondPlayerCards.Add(firstPlayerCards[0]);
				}

				firstPlayerCards.Remove(firstPlayerCards[0]); //.RemoveAt(0)
				secondPlayerCards.Remove(secondPlayerCards[0]);

				if (firstPlayerCards.Count == 0)
				{
					int sum = secondPlayerCards.Sum();
					Console.WriteLine($"Second player wins! Sum: {sum}");
					break;
				}
				else if (secondPlayerCards.Count == 0)
				{
					int sum = firstPlayerCards.Sum();
					Console.WriteLine($"First player wins! Sum: {sum}");
					break;
				}
			}

7
===============================
100/100
		var initialList = Console.ReadLine().Split('|').Reverse().ToList();
			var reversedList = new List<string>();

			for (var i = 0; i < initialList.Count; i++)
			{
				var currentElements = initialList[i]
					.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries)
					.ToList();

				reversedList.AddRange(currentElements);
			}

			Console.WriteLine(string.Join(" ", reversedList));

-------------------------------------------
75/100 

	List<string> initialList = Console.ReadLine().Split('|').ToList();

			List<List<int>> finalList = new List<List<int>>();

			for (int i = 0; i < initialList.Count; i++)
			{
				finalList.Add(new List<int>());

				finalList[i] = initialList[i]
					.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries)
					.Select(int.Parse)
					.ToList();			
			}

			for (int i = finalList.Count - 1; i >= 0; i--)
			{
				Console.Write(string.Join(" ", finalList[i]) + " ");
			}
			Console.WriteLine();
		
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
75/100 
			var inputList = Console.ReadLine().Split('|').Reverse().ToList();

			var reversedElements = new List<List<int>>();

			for (var i = 0; i < inputList.Count; i++)
			{
				List<int> currentElement = inputList[i]
					.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries)
					.Select(int.Parse)
					.ToList();
				
				reversedElements.Add(new List<int>(currentElement));
			}

			foreach(var item in reversedElements)
			{
				Console.Write(string.Join(" ", item) + " ");
			}
			
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$	

8
===============================

	static void Main(string[] args)
		{
			var dataLine = Console.ReadLine().Split();

			var input = Console.ReadLine();

			while(input != "3:1")
			{
				var tokens = input.Split();
				var command = tokens[0];

				switch (command)
				{
					case "merge":
						var startIndex = int.Parse(tokens[1]);
						var endIndex = int.Parse(tokens[2]);
						dataLine = Merge(dataLine, startIndex, endIndex);
						break;
					case "divide":
						var index = int.Parse(tokens[1]);
						var partitions = int.Parse(tokens[2]);
						dataLine = Divide(dataLine, index, partitions);
						break;
				}

				input = Console.ReadLine();
			}

			Console.WriteLine(string.Join(" ", dataLine));
		}

		private static string[] Divide(string[] dataLine, int index, int partitions)
		{
			string element = dataLine[index];

			int partitionLength = element.Length / partitions;
			string[] divided = new string[partitions];

			for (int i = 0; element.Length > partitionLength; i++)
			{
				divided[i] = element.Substring(0, partitionLength);
				element = element.Substring(partitionLength);
			}

			divided[partitions - 1] += element;

			return dataLine.Take(index)
				.Concat(divided)
				.Concat(dataLine.Skip(index + 1))
				.ToArray();
		}

		private static string[] Merge(string[] dataLine, int startIndex, int endIndex)
		{
			string mergedElements = string.Empty;

			if(startIndex < 0)
			{
				startIndex = 0;
			}
			
			if(endIndex >= dataLine.Length)
			{
				endIndex = dataLine.Length - 1;
			}
			//If any of the given indexes is out of the array, you must take only the range
			//that is inside the array and merge it.

			for (int i = startIndex; i <= endIndex; i++)
			{
				mergedElements += dataLine[i];
			}

			return dataLine.Take(startIndex)          
				.Concat(new string[] { mergedElements })	
				.Concat(dataLine.Skip(endIndex + 1)) 
				.ToArray();						
		}
9
===============================

static void Main(string[] args)
		{
			List<long> numbersList = Console.ReadLine().Split().Select(long.Parse).ToList();

			long sum = 0;

			while(numbersList.Count > 0)
			{
				int currentIndex = int.Parse(Console.ReadLine());

				long removedElement = 0;

				if(currentIndex < 0)
				{
					removedElement = numbersList[0];
					numbersList[0] = numbersList[numbersList.Count - 1];
				}
				else if(currentIndex >= numbersList.Count)
				{
					removedElement = numbersList[numbersList.Count - 1];
					numbersList[numbersList.Count - 1] = numbersList[0];
				}
				else
				{
					removedElement = numbersList[currentIndex];
					numbersList.RemoveAt(currentIndex);
				}

				sum += removedElement;

				for (int i = 0; i < numbersList.Count; i++)
				{		
					if(numbersList[i] <= removedElement)
					{
						numbersList[i] += removedElement;
					}
					else
					{
						numbersList[i] -= removedElement;
					}
				}
			}

			Console.WriteLine(sum);
10
===============================

static void Main(string[] args)
		{
				var lessonsList = Console.ReadLine()
				.Split(", ", StringSplitOptions.RemoveEmptyEntries)
				.ToList();

			var input = Console.ReadLine();

			while (input != "course start")
			{
				var tokens = input
					.Split(':', StringSplitOptions.RemoveEmptyEntries)
					.ToArray();

				var command = tokens[0];
				var lesson = tokens[1];

				switch (command)
				{
					case "Add":

						if (!lessonsList.Contains(lesson))
						{
							lessonsList.Add(lesson);
						}
						break;
					case "Insert":

						var index = int.Parse(tokens[2]);

						if (!lessonsList.Contains(lesson) && (0 <= index && index < lessonsList.Count))
						{
							lessonsList.Insert(index, lesson);
						}
						break;
					case "Remove":

						lessonsList.Remove(lesson);
						lessonsList.Remove($"{lesson}-Exercise");
						break;
					case "Swap":
					
						var firstLessonTitle = tokens[1];
						var secondLessonTitle = tokens[2];

						var indexOfFirstLesson = lessonsList.IndexOf(firstLessonTitle);
						var indexOfSecondLesson = lessonsList.IndexOf(secondLessonTitle);

						if (indexOfFirstLesson != -1 && indexOfSecondLesson != -1)
						{
							lessonsList[indexOfFirstLesson] = secondLessonTitle;
							lessonsList[indexOfSecondLesson] = firstLessonTitle;

							if (indexOfFirstLesson + 1 < lessonsList.Count &&
								lessonsList[indexOfFirstLesson + 1] == $"{firstLessonTitle}-Exercise")
							{
								lessonsList.RemoveAt(indexOfFirstLesson + 1);
								indexOfFirstLesson = lessonsList.IndexOf(firstLessonTitle);
								lessonsList.Insert(indexOfFirstLesson + 1, $"{firstLessonTitle}-Exercise");
							}
							else if (indexOfSecondLesson + 1 < lessonsList.Count &&
								lessonsList[indexOfSecondLesson + 1] == $"{secondLessonTitle}-Exercise")
							{
								lessonsList.RemoveAt(indexOfSecondLesson + 1);
								indexOfSecondLesson = lessonsList.IndexOf(secondLessonTitle);
								lessonsList.Insert(indexOfSecondLesson + 1, $"{secondLessonTitle}-Exercise");
							}
						}
						break;
					case "Exercise":
					
						index = lessonsList.IndexOf(lesson);

						if (lessonsList.Contains(lesson) &&
							!lessonsList.Contains($"{lesson}-Exercise"))
						{
							lessonsList.Insert(index + 1, $"{lesson}-Exercise");
						}
						else if (!lessonsList.Contains(lesson))
						{
							lessonsList.Add(lesson);
							lessonsList.Add($"{lesson}-Exercise");
						}
						break;
				}

				input = Console.ReadLine();
			}

			for (int i = 0; i < lessonsList.Count; i++)
			{
				Console.WriteLine($"{i + 1}.{lessonsList[i]}");
			}
		}