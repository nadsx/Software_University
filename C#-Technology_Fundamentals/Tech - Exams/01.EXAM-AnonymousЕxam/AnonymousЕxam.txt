1
===================================

    int n = int.Parse(Console.ReadLine());
            int securityKey = int.Parse(Console.ReadLine());

            //We will store the sites in a StringBuilder using AppendLine
            //At the end we will just print it
            StringBuilder affectedSites = new StringBuilder();

            //20 digits after the decimal point will fit only in decimal
            //And we are working with MONEY on top of that
            decimal totalLoss = 0M; 

            for (int i = 0; i < n; i++)
            {
                string[] siteParameters = Console.ReadLine().Split();

                string siteName = siteParameters[0];
                long siteVisits = long.Parse(siteParameters[1]); //hmm why long ... [0, 2^31]... int range is [-2^31, 2^31 - 1]
                decimal siteCommercialIncomePerVisit = decimal.Parse(siteParameters[2]); //again, money

                affectedSites.AppendLine(siteName); //just add the site here with append line
                totalLoss += siteCommercialIncomePerVisit * siteVisits; //the formula from the problem description
            }

            Console.Write(affectedSites); //Just a simple print
            Console.WriteLine($"Total Loss: {totalLoss:F20}"); //Print and format

            //Third result of search in google "how to power big number C#"
            //Why big number? Let's check the problem description
            //We have to power the security key (which by Constraints has maximum value - 9)
            //We have to power it by the sites count (in other words N, which by Constraints has a maximum value - 100)
            //9^100 ... Sure won't fit in double. So it's a big number.
            Console.WriteLine($"Security Token: {BigInteger.Pow(new BigInteger(securityKey), n)}");

2
===================================
    
   class AnonymousThreat
    {
        static void Main(string[] args)
        {
            //Lets get the input - the array of strings. There will be many manipulations so why not
            //get it directly as list.
            List<string> sensitiveData = Console.ReadLine().Split().ToList();

            string inputLine = string.Empty;

            //Another cool way to make a "Read Until" While loop
            while ((inputLine = Console.ReadLine()) != "3:1")
            {
                string[] inputParameters = inputLine.Split();

                string command = inputParameters[0];

                //Checking the command
                if (command == "merge")
                {
                    int startIndex = int.Parse(inputParameters[1]);
                    int endIndex = int.Parse(inputParameters[2]);

                    //Passing the List to a method
                    sensitiveData = Merge(sensitiveData, startIndex, endIndex);
                }
                else if(command == "divide")
                {
                    int index = int.Parse(inputParameters[1]);
                    int partitions = int.Parse(inputParameters[2]);

                    //Passing the list to a method
                    sensitiveData = Divide(sensitiveData, index, partitions);
                }
            }

            Console.WriteLine(string.Join(" ", sensitiveData));
        }

        //This method will get an index and the max length of the List
        //Then it will change the index if it is outside the boundaries of the array.
        private static int ChangeIndex(int index, int maxLength)
        {
            if (index < 0)
            {
                index = 0;
            }

            if (index >= maxLength)
            {
                index = maxLength - 1;
            }

            return index;
        }

        //The Merge method
        private static List<string> Merge(List<string> sensitiveData, int startIndex, int endIndex)
        {
            //Lets validate the indexes, so they will not be outsite the array
            startIndex = ChangeIndex(startIndex, sensitiveData.Count);
            endIndex = ChangeIndex(endIndex, sensitiveData.Count);

            //Lets create a new list
            List<string> newList = new List<string>();

            //Lets add everything up until the startIndex in the new list.
            for (int i = 0; i < startIndex; i++)
            {
                newList.Add(sensitiveData[i]);
            }

            //Lets get a StringBuilder, since we will be appending strings (merging)
            StringBuilder result = new StringBuilder();

            //Lets merge the elements we need to merge
            for (int i = startIndex; i <= endIndex; i++)
            {
                result.Append(sensitiveData[i]);
            }

            //Lets add the newly merged element to the new list
            newList.Add(result.ToString());

            //Lets add all other elements after the mergin indexes to the newlist
            for (int i = endIndex + 1; i < sensitiveData.Count; i++)
            {
                newList.Add(sensitiveData[i]);
            }

            //What do we get ? 
            //A new list with all old elements, except the merged ones, which are a totally new SINGLE element.
            return newList;
        }

        //The Divide method
        private static List<string> Divide(List<string> sensitiveData, int index, int partitions)
        {
            //Get the element at that index.
            //It was said in the Constraints section that it will always be a valid index
            string element = sensitiveData[index];

            //Lets integer divide the element's length into the partitions to get the minimal length
            //the elements should have
            int partitionLength = element.Length / partitions;

            //Lets get a new list of the partitions
            List<string> dividedPartitions = new List<string>();

            //Lets get a loop for all the partitions
            for (int i = 0; i < partitions; i++)
            {
                //If its the last element
                if (i == partitions - 1)
                {
                    //Just add everything after it, so that it is the longest one
                    //In other words, accoarding to the description, we must make the LAST element - the LONGEST
                    dividedPartitions.Add(element.Substring(i * partitionLength));
                }
                else
                {
                    //If its not the last element, just add a substring from its index
                    //and cut "partitionLength" amount of characters
                    dividedPartitions.Add(element.Substring(i * partitionLength, partitionLength));
                }
            }

            //Now whats the logic with the i * partitionLength

            //EXAMPLE NO.1: We have "abcdef" we want to divide it by 4.
            //partitionLength = element.Length (6) / partition (4) = 1 (integer division)
            //for (i = 0; i < 4; i++)
            //First iteration - i = 0. 0 * 1 = 0. Start index - 0, length - 1, Substring result - "a"
            //Second iteration - i = 1. 1 * 1 = 1. Start index - 1, length - 1, Substring result - "b"
            //Third iteration - i = 2. 2 * 1 = 2. Start index - 2, length - 1, Substring result - "c"
            //Fourth iteration (FINAL ITERATION) - i = 3, 3 * 1 = 3. Start index - 3, length - none, Substring result - "def"

            //EXAMPLE NO.2: Lets try with a longer string. 
            //We have "123456789" we want to divide it by 4.
            //partitionLength = element.Length (9) / partition (4) = 2 (integer division)
            //for (i = 0; i < 4; i++)
            //First iteration - i = 0. 0 * 2 = 0. Start index - 0, length - 2, Substring result - "12"
            //Second iteration - i = 1. 1 * 2 = 2. Start index - 2, length - 2, Substring result - "34"
            //Third iteration - i = 2. 2 * 2 = 4. Start index - 4, length - 2, Substring result - "56"
            //Fourth iteration (FINAL ITERATION) - i = 3, 3 * 2 = 6. Start index - 6, length - none, Substring result - "789"

            //Then lets just remove the old element from the array
            sensitiveData.RemoveAt(index);
            //Then lets just InsertRange the new partitions at that index
            sensitiveData.InsertRange(index, dividedPartitions);

            //Then we get a list with the new divided data in it.
            return sensitiveData;
        }
    }

3
===================================

    class AnonymousVox
    {
        static void Main(string[] args)
        {
            //Read the text
            string text = Console.ReadLine();
            //Read the placeholders
            string[] placeholders = Console.ReadLine().Split(new char[] {'{', '}'}, StringSplitOptions.RemoveEmptyEntries);

            //Why this pattern? Because we have a sequence of letters, then we have a sequence
            //of ANY ASCII character, then we have another sequence of letters WHICH MUST BE EQUAL TO THE FIRST
            //Well ... How do we do that with Regex? A simple backreference.
            //What's a backreference? Regex Presentation - "\number – matches the value of a numbered capture group"
            //THE VALUE, not the pattern, so its MATCHES THE SAME VALUE THAT THE FIRST GROUP MATCHES
            //Which is exactly what we need for our problem.
            string pattern = @"([a-zA-Z]+)(.+)\1";
            Regex regex = new Regex(pattern);

            //Match them all
            MatchCollection matches = regex.Matches(text);

            //We'll need to follow the placeholders with some index
            int placeholderIndex = 0;

            //Foreach the matches
            foreach (Match match in matches)
            {

                //If the placeholders are more than the values, then we break.
                if (placeholderIndex >= placeholders.Length) break;
                
                //If not, we REPLACE FIRST, wait ... Why first. Because we need to replace ONLY ONE PLACEHOLDER WITH ONE VALUE.
                text = ReplaceFirst(text, match.Groups[2].Value, placeholders[placeholderIndex++]);
            }

            Console.WriteLine(text);
        }

        //A method for replacing first, works like string.Replace.. But only replaces the first result.
        static string ReplaceFirst(string text, string oldValue, string newValue)
        {
            string substringWithOldValue = text.Substring(0, text.IndexOf(oldValue) + oldValue.Length);

            string substringWithNewValue = substringWithOldValue.Replace(oldValue, newValue);

            return substringWithNewValue + text.Substring(substringWithOldValue.Length);
        }
    }

-----------------------------------

var placeholderRegex = new Regex(@"([A-Za-z]+).+\1");
            var valueRegex = new Regex(@"{(.+?)}");
            string text = Console.ReadLine();
            string valuesText = Console.ReadLine();
            var values = valueRegex.Matches(valuesText);
            int i = 0;
            text = placeholderRegex.Replace(text, m =>
            {
                if (i < values.Count)
                    return $"{m.Groups[1].Value}{values[i++].Groups[1].Value}{m.Groups[1].Value}"; // i++ returns i and increments it
                return m.Value;
            });
            Console.WriteLine(text);

4
===================================

           //The Dictionary problem. How do we solve it without Classes.
            //We have to have an actual data and some cache data. Well ... Let's just make 2 identical dictionaries.
            Dictionary<string, Dictionary<string, long>> data = new Dictionary<string, Dictionary<string, long>>();
            Dictionary<string, Dictionary<string, long>> cache = new Dictionary<string, Dictionary<string, long>>();

            string inputLine = string.Empty;

            //Another cool way to make a "Read Until" While loop
            while ((inputLine = Console.ReadLine()) != "thetinggoesskrra")
            {
                //Just split the input
                string[] inputParameters =
                    inputLine.Split(new []{' ', '-', '>', '|'}, StringSplitOptions.RemoveEmptyEntries);

                //If we are adding a dataSet
                if (inputParameters.Length == 1)
                {
                    string dataSet = inputParameters[0];

                    //If the cache contains the dataSet, we add all of the dataKeys and dataSizes from the cache to the actual data
                    if (cache.ContainsKey(dataSet))
                    {
                        data[dataSet] = new Dictionary<string, long>(cache[dataSet]);
                        cache.Remove(dataSet);
                    }
                    else
                    {
                        //Else we just initialize an empty one
                        data[dataSet] = new Dictionary<string, long>();
                    }
                }
                else
                {
                    string dataKey = inputParameters[0];
                    long dataSize = long.Parse(inputParameters[1]);
                    string dataSet = inputParameters[2];

                    //If the data does not contain such a dataSet we add it to the cache
                    if (!data.ContainsKey(dataSet))
                    {
                        //If the cache does not contain such a dataSet, we initialize the inner dictionary
                        //Otherwise we get null reference exception
                        if (!cache.ContainsKey(dataSet))
                        {
                            cache[dataSet] = new Dictionary<string, long>();
                        }

                        //Then we just add the key and size to the cache
                        cache[dataSet][dataKey] = dataSize;
                    }
                    else
                    {
                        //If the data contains such a dataSet, we just add the key and the size to it
                        data[dataSet][dataKey] = dataSize;
                    }
                }
            }

            //If no data is found .First() will return Exception.
            //It was written in the Problem Description that we need to DO NOTHING
            if (data.Count > 0)
            {
                //Get the first result
                //Now here it gets funny
                //You wondered why we have long in our dictionary?
                //By constraint the value is [0, 1.000.000.000]. And int max value is > 2.000.000.000
                //But we have to sum them ... What happens when we sum 3 * 1.000.000.000?
                KeyValuePair<string, Dictionary<string, long>> result = data
                    .OrderByDescending(ds => ds.Value.Sum(d => d.Value)) //SUMMING EVERYTHING
                    .First();

                //Just a simple print
                Console.WriteLine($"Data Set: {result.Key}, Total Size: {result.Value.Sum(d => d.Value)}");

                //Let's extract the prefix in a variable
                string prefix = "$.";

                foreach (var value in result.Value)
                {
                    //Just printing
                    Console.WriteLine($"{prefix}{value.Key}");
                }
            }
        }