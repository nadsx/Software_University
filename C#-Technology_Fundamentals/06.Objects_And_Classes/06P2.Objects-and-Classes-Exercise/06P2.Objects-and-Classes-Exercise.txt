1
===============================

class Program
	{
		static void Main(string[] args)
		{
			var numberOfMessages = int.Parse(Console.ReadLine());
			var messages = GenerateRandomMessage(numberOfMessages);

			Console.WriteLine(string.Join(Environment.NewLine, messages));
		}

		static List<string> GenerateRandomMessage(int count)
		{
			var phrases = new string[]
			{
				"Excellent product.",
				"Such a great product.",
				"I always use that product.",
				"Best product of its category.",
				"Exceptional product.",
				"I can’t live without this product."
			};
			var events = new string[]
			{
				"Now I feel good.",
				"I have succeeded with this product.",
				"Makes miracles. I am happy of the results!",
				"I cannot believe but now I feel awesome.",
				"Try it yourself, I am very satisfied.",
				"I feel great!"
			};

			var authors = new string[]
			{"Diana", "Petya", "Stella", "Elena", "Katya", "Iva", "Annie", "Eva"};

			var cities = new string[]
			{"Burgas", "Sofia", "Plovdiv", "Varna", "Ruse"};

			var random = new Random();
			var result = new List<string>();

			for (int i = 0; i < count; i++)
			{
				var randomPhrase = phrases[random.Next(phrases.Length)];
				var randomEvent = events[random.Next(events.Length)];
				var randomAuthor = authors[random.Next(authors.Length)];
				var randomCity = cities[random.Next(cities.Length)];
				result.Add($"{randomPhrase} {randomEvent} {randomAuthor} – {randomCity}");
			}

			return result;
		}
	}

2
================================

class Program
	{
		static void Main(string[] args)
		{
			string[] input = Console.ReadLine().Split(", ");
			int n = int.Parse(Console.ReadLine());

			var article = new Article(input[0], input[1], input[2]);

			for (int i = 0; i < n; i++)
			{
				string[] tokens = Console.ReadLine().Split(": ");
				string command = tokens[0];

				switch (command)
				{
					case "Edit":
						article.Edit(tokens[1]);
						break;
					case "ChangeAuthor":
						article.ChangeAuthor(tokens[1]);
						break;
					case "Rename":
						article.Rename(tokens[1]);
						break;
				}
			}

			Console.WriteLine(article);
		}

		class Article
		{
			public string Title { get; set; }
			public string Content { get; set; }
			public string Author { get; set; }

			public Article(string title, string content, string author)
			{
				Title = title;
				Content = content;
				Author = author;
			}

			public void Edit(string newContent)
			{
				Content = newContent;
			}

			public void ChangeAuthor(string newAuthor)
			{
				Author = newAuthor;
			}

			public void Rename(string newTitle)
			{
				Title = newTitle;
			}

			public override string ToString()
			{ 
				return $"{Title} - {Content}: {Author}";
			}
		}
	}

--------------------------------
	class Program
	{
		static void Main(string[] args)
		{

			string[] input = Console.ReadLine().Split(", ");
			int n = int.Parse(Console.ReadLine());

			var article = new Article(input[0], input[1], input[2]);

			for (int i = 0; i < n; i++)
			{
				string[] command = Console.ReadLine().Split(": ");

				if(command[0] == "Edit")
				{
					article.Content = command[1];
				}
				else if(command[0] == "ChangeAuthor")
				{
					article.Author = command[1];
				}
				else if(command[0] == "Rename")
				{
					article.Title = command[1];
				}
			}

			Console.WriteLine(article.ToString());
		}
	}
	class Article
	{
		public string Title { get; set; }
		public string Content { get; set; }
		public string Author { get; set; }

		public Article(string newTitle, string newContent, string newAuthor)
		{
			Title = newTitle;		
			Content = newContent;
			Author = newAuthor;
		}

		public override string ToString()
		{
			return $"{Title} - {Content}: {Author}";
		}
	}
3
================================

class Program
	{
		static void Main(string[] args)
		{
			int n = int.Parse(Console.ReadLine());
			
			List<Article> articles = new List<Article>();

			for (int i = 0; i < n; i++)
			{
				string[] input = Console.ReadLine().Split(", ");

			    var article = new Article(input[0], input[1], input[2]);

				articles.Add(article);
			}

			string inputOrder = Console.ReadLine();

			string criteria = inputOrder.First().ToString().ToUpper() + inputOrder.Substring(1);

			articles = articles.OrderBy(s => s.GetType().GetProperty(criteria).GetValue(s)).ToList();

			//if (criteria == "title")
			//{
			//	articles = articles.OrderBy(x => x.Title)
			//		.ToList();
			//}
			//else if (criteria == "content")
			//{
			//	articles = articles.OrderBy(x => x.Content)
			//		 .ToList();
			//}
			//else if (criteria == "author")
			//{
			//	articles = articles.OrderBy(x => x.Author)
			//		.ToList();
			//}

			Console.WriteLine(string.Join(Environment.NewLine, articles));
		}
	}
	class Article
	{
		public string Title { get; set; }
		public string Content { get; set; }
		public string Author { get; set; }

		public Article(string title, string content, string author)
		{
			Title = title;
			Content = content;
			Author = author;
		}

		public override string ToString()
		{
			return $"{Title} - {Content}: {Author}";
		}
	}
4
================================

class Program
	{
		static void Main(string[] args)
		{
			int n = int.Parse(Console.ReadLine());

			List<Student> students = new List<Student>();

			for (int i = 0; i < n; i++)
			{
				string[] tokens = Console.ReadLine().Split();

				Student student = new Student(tokens[0], tokens[1], double.Parse(tokens[2]));

				students.Add(student);
			}

			Console.WriteLine(string.Join(Environment.NewLine, students
				.OrderByDescending(x => x.Grade)));
		}
	}
	class Student
	{
		public string FirstName { get; set; }
		public string LastName { get; set; }
		public double Grade { get; set; }

		public Student(string firstName, string lastName, double grade)
		{
			FirstName = firstName;
			LastName = lastName;
			Grade = grade;
		}

		public override string ToString()
		{
			return $"{FirstName} {LastName}: {Grade:f2}";
		}
	}

5
================================

class Program
	{
		static void Main(string[] args)
		{
			int countOfTheTeams = int.Parse(Console.ReadLine());
			List<Team> teams = new List<Team>();

			for (int i = 0; i < countOfTheTeams; i++)
			{
				string[] tokens = Console.ReadLine().Split('-');
				string currentCreatorName = tokens[0];
				string currentTeamName = tokens[1];

				if (teams.Any(t => t.TeamName == currentTeamName))
				{
					Console.WriteLine($"Team {currentTeamName} was already created!");
					continue;
				}

				if (teams.Any(t => t.CreatorName == currentCreatorName))
				{
					Console.WriteLine($"{currentCreatorName} cannot create another team!");
					continue;
				}

				Team team = new Team(currentTeamName, currentCreatorName);
				teams.Add(team);
				
				Console.WriteLine($"Team {currentTeamName} has been created by {currentCreatorName}!");
			}

			while (true)
			{
				string input = Console.ReadLine();

				if (input == "end of assignment")
				{
					break;
				}

				string[] tokens = input.Split("->");
				string memberName = tokens[0];
				string teamToJoin = tokens[1];

				if (!teams.Any(t => t.TeamName == teamToJoin))
				{
					Console.WriteLine($"Team {teamToJoin} does not exist!");
					continue;
				}

				if (teams.Any(t => t.TeamMembers.Contains(memberName)) ||
					teams.Any(t => t.CreatorName == memberName))
				{
					Console.WriteLine($"Member {memberName} cannot join team {teamToJoin}!");
					continue;
				}

				Team team = teams.First(t => t.TeamName == teamToJoin);
				team.TeamMembers.Add(memberName);
			}

			List<Team> orderedTeams = teams
				.Where(t => t.TeamMembers.Count > 0)
				.OrderByDescending(t => t.TeamMembers.Count)
				.ThenBy(t => t.TeamName)
				.ToList();

			foreach (var team in orderedTeams)
			{
				Console.WriteLine(team.TeamName);
				Console.WriteLine($"- {team.CreatorName}");

				foreach (var member in team.TeamMembers.OrderBy(m => m))
				{
					Console.WriteLine($"-- {member}");
				}
			}

			List<Team> teamsToDisband = teams
			.Where(t => t.TeamMembers.Count == 0)
			.ToList();

			Console.WriteLine("Teams to disband:");

			foreach (var team in teamsToDisband.OrderBy(t => t.TeamName))
			{
				Console.WriteLine(team.TeamName);
			}
		}
	}
	class Team
	{
		// OT KENOV V PROMENLIVITE S GET I SET ZAPISVAME STOINOSTITE TAM 
		public string TeamName { get; set; }
		public string CreatorName { get; set; }
		public List<string> TeamMembers { get; set; }

		public Team(string teamName, string creatorName)
		{
			TeamName = teamName;
			CreatorName = creatorName;
			TeamMembers = new List<string>();
		}
	}


-------------------------------------------

class Program
	{
		static void Main(string[] args)
		{
			List<Team> teams = GetTeams();

			PrintTeams(teams);
		}

		static void PrintTeams(List<Team> teams)
		{
			var printTeams = teams
				.Where(x => x.Members.Count > 0)
				.ToList();

			foreach (var team in printTeams)
			{
				Console.WriteLine(team.Name);
				Console.WriteLine($"- {team.Creator}");

				var members = team.Members.OrderBy(x => x).ToList();

				foreach (var member in members)
				{
					Console.WriteLine($"-- {member}");
				}
			}

			Console.WriteLine("Teams to disband:");
			var teamsToDisband = teams
				.Where(x => x.Members.Count == 0)
				.ToList();

			foreach (var team in teamsToDisband)
			{
				Console.WriteLine(team.Name);
			}
		}

		private static List<Team> GetTeams()
		{

			List<Team> teams = CreateTeams();

			teams = AddMembers(teams);

			teams = teams
				.OrderByDescending(x => x.Members.Count)
				.ThenBy(x => x.Name)
				.ToList();

			return teams;
		}

		static List<Team> AddMembers(List<Team> teams)
		{
			var command = Console.ReadLine();

			while (command != "end of assignment")
			{
				var commandList = command.Split(new string[] { "->" }, StringSplitOptions.None);
				var userName = commandList[0];
				var teamName = commandList[1];

				var currentTeam = teams.FirstOrDefault(t => t.Name == teamName);

				if (currentTeam == null)
				{
					Console.WriteLine($"Team {teamName} does not exist!");
					command = Console.ReadLine();
					continue;
				}

				var currentCreator = teams.Any(x => x.Creator == userName);
				var currentUser = teams.Any(x => x.Members.Contains(userName));

				if (currentCreator || currentUser)
				{
					Console.WriteLine($"Member {userName} cannot join team {teamName}!");
					command = Console.ReadLine();
					continue;
				}

				currentTeam.Members.Add(userName); // TUKA currentTeam e s ime ot imenata v teams 
												   // toest dali tuka shte go podpuhne tuka ili v teams vse taq slaga go na edno i sushto mqsto
				command = Console.ReadLine();
			}

			return teams;
		}

		static List<Team> CreateTeams()
		{
			List<Team> teams = new List<Team>();

			var teamsCount = int.Parse(Console.ReadLine());

			for (int i = 0; i < teamsCount; i++)
			{
				var commandList = Console.ReadLine().Split('-');
				var userName = commandList[0];
				var teamName = commandList[1];

				var currentTeam = teams.FirstOrDefault(n => n.Name == teamName);

				if (currentTeam != null)
				{
					Console.WriteLine($"Team {teamName} was already created!");
					continue;
				}

				var currentCreator = teams.FirstOrDefault(n => n.Creator == userName);

				if (currentCreator != null)
				{
					Console.WriteLine($"{userName} cannot create another team!");
					continue;
				}

				var newTeam = new Team
				{
					Name = teamName,
					Creator = userName,
					Members = new List<string>()
				};

				Console.WriteLine($"Team {teamName} has been created by {userName}!");

				teams.Add(newTeam);
			}

			return teams;
		}
	}

	class Team
	{
		public string Name { get; set; }
		public string Creator { get; set; }
		public List<string> Members { get; set; }
	}


-----------------------------------

class Program
	{
		static void Main(string[] args)
		{
			int n = int.Parse(Console.ReadLine());
			string input = Console.ReadLine();

			string currentCreatorName;
			string currentTeamName;

			List<Team> teams = new List<Team>();

			for (int i = 0; i < n; i++)
			{
				string[] tokens = input.Split('-').ToArray();
				currentCreatorName = tokens[0];
				currentTeamName = tokens[1];

				if(teams.Any(x => x.TeamName == currentTeamName))
				{
					Console.WriteLine($"Team {currentTeamName} was already created!");
				}
				else
				{
					if(teams.Any(x => x.CreatorName == currentCreatorName))
					{
						Console.WriteLine($"{currentCreatorName} cannot create another team!");
					}
					else
					{
						Team team = new Team();
						team.CreatorName = currentCreatorName;
						team.TeamName = currentTeamName;
						
						List<string> members = new List<string>();
						team.TeamMembers = members;

						teams.Add(team);
						Console.WriteLine($"Team {team.TeamName} has been created by {team.CreatorName}!");
					}
				}

				input = Console.ReadLine();
			}

			string userName;
			string teamToJoin;

			while(input != "end of assignment")
			{
				string[] tokens = input.Split(new char[] { '-', '>' }, 
					StringSplitOptions.RemoveEmptyEntries)
					.ToArray();

				userName = tokens[0];
				teamToJoin = tokens[1];

				if(!teams.Any(x => x.TeamName == teamToJoin))
				{
					Console.WriteLine($"Team {teamToJoin} does not exist!");
				}
				else if (teams.Any(x => x.TeamMembers.Contains(userName))
					|| teams.Any(x => x.CreatorName == userName))
				{
					Console.WriteLine($"Member {userName} cannot join team {teamToJoin}!");
				}
				else
				{
					foreach(var team in teams.Where(x => x.TeamName == teamToJoin))
					{
						team.TeamMembers.Add(userName);
					}
				}

				input = Console.ReadLine();
			}

			foreach(var team in teams.Where(x => x.TeamMembers.Count != 0)
				.OrderByDescending(x => x.TeamMembers.Count).ThenBy(x => x.TeamName))
			{
				Console.WriteLine($"{team.TeamName}");
				Console.WriteLine($"- {team.CreatorName}");

				foreach(var member in team.TeamMembers.OrderBy(x => x))
				{
					Console.WriteLine($"-- {member}");
				}
			}

			Console.WriteLine("Teams to disband:");

			foreach(var team in teams.Where(x => x.TeamMembers.Count == 0).OrderBy(x => x.TeamName))
			{
				Console.WriteLine($"{team.TeamName}");
			}
		}
	}
	class Team
	{
		public string TeamName { get; set; }
		public string CreatorName { get; set; }
		public List<string> TeamMembers { get; set; }
	}
6
================================
	
class Program
	{
		static void Main(string[] args)
		{
			List<Vehicle> vehicleCatalogue = new List<Vehicle>();

			GetVehicles(vehicleCatalogue);
			PrintVehicles(vehicleCatalogue);

			PrintAverageHorsepower(vehicleCatalogue, true);
			PrintAverageHorsepower(vehicleCatalogue, false);
		}

		private static void PrintAverageHorsepower(List<Vehicle> vehicleCatalogue, bool isCar)
		{
			List<Vehicle> horsepowerList = vehicleCatalogue.Where(type => type.IsCar == isCar).ToList();

			double averageHorsepower = horsepowerList.Count == 0 ?
				0.0 : horsepowerList.Select(v => (double)v.Horsepower).Average();

			string vehicleType = isCar ? "Cars" : "Trucks";

			Console.WriteLine($"{vehicleType} have average horsepower of: {averageHorsepower:f2}.");
		}

		private static void PrintVehicles(List<Vehicle> vehicleCatalogue)
		{
			string model = Console.ReadLine();

			while (model != "Close the Catalogue")
			{
				Console.WriteLine(vehicleCatalogue.First(v => v.Model == model));

				model = Console.ReadLine();
			}
		}

		private static void GetVehicles(List<Vehicle> vehicleCatalogue)
		{
			string input = Console.ReadLine();

			while (input != "End")
			{
				string[] vehicleInfo = input.Split();
				bool typeOfVehicle = vehicleInfo[0] == "car";
				string model = vehicleInfo[1];
				string color = vehicleInfo[2];
				int horsepower = int.Parse(vehicleInfo[3]);

				var newVehicle = new Vehicle()
				{
					IsCar = typeOfVehicle,
					Model = model,
					Color = color,
					Horsepower = horsepower
				};

				vehicleCatalogue.Add(newVehicle);

				input = Console.ReadLine();
			}
		}
	}
	class Vehicle
	{
		public bool IsCar { get; set; }
		public string Model { get; set; }
		public string Color { get; set; }
		public int Horsepower { get; set; }

		public override string ToString()
		{
			string vehicleType = IsCar ? "Car" : "Truck";

			string output = $"Type: {vehicleType}\r\n";
			output += $"Model: {Model}\r\n";
			output += $"Color: {Color}\r\n";
			output += $"Horsepower: {Horsepower}";
			return output;
		}
	}
	
		

7
================================

class Program
	{
		static void Main(string[] args)
		{	
		    string input = Console.ReadLine();
			var people = new List<Person>();
		
			while(input != "End")
			{
				string[] personInfo = input.Split();
				string personName = personInfo[0];
				string personId = personInfo[1];
				int personAge = int.Parse(personInfo[2]);

				var newPerson = new Person()
				{
					Name = personName,
					Id = personId,
					Age = personAge
				};

				people.Add(newPerson);

				input = Console.ReadLine();
			}

			foreach(var person in people.OrderBy(x => x.Age))
			{
				Console.WriteLine($"{person.Name} with ID: {person.Id} is {person.Age} years old.");
			}
		}
	}
	class Person
	{
		public string Name { get; set; }
		public string Id { get; set; }
		public int Age { get; set; }
	}
	
------------------------------------
	
	 class Program
    {
        static void Main(string[] args)
        {
            List<Person> people = new List<Person>();
            string inpitLine = Console.ReadLine();

            while (inpitLine != "End")
            {
                string[] tokens = inpitLine.Split();

                Person person = new Person(tokens);

                people.Add(person);

                inpitLine = Console.ReadLine();
            }

            foreach (var person in people.OrderBy(x=>x.Age))
            {
                Console.WriteLine($"{person.Name} with ID: {person.Id} is {person.Age} years old.");
            }
        }
        class Person
        {
            public Person(string[] inputData)
            {
                this.Name = inputData[0];
                this.Id = inputData[1];
                this.Age = int.Parse(inputData[2]);
            }
            public string Name { get; set; }
            public string Id { get; set; }
            public int Age { get; set; }
        }
    }