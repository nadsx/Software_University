1
=============================

                        char[] text = Console.ReadLine().Where(x => x != ' ').ToArray();

			var countChars = new Dictionary<char, int>();

			foreach(var character in text)
			{
				if (!countChars.ContainsKey(character))
				{
					countChars[character] = 0;
				}

				countChars[character]++;
			}

			foreach(var kvp in countChars)
			{
				Console.WriteLine($"{kvp.Key} -> {kvp.Value}");
			}
2
=============================

	var resources = new Dictionary<string, int>();

			string resource = Console.ReadLine();

			while (resource != "stop")
			{
				int quantity = int.Parse(Console.ReadLine());

				if (!resources.ContainsKey(resource))
				{
					resources[resource] = quantity;
				}
				else
				{
					resources[resource] += quantity;
				}

				resource = Console.ReadLine();
			}

			foreach(var kvp in resources)
			{
				Console.WriteLine($"{kvp.Key} -> {kvp.Value}");
			}

--------------------------------------------

 static void Main(string[] args)
        {
            var minedResources = new Dictionary<string, int>();
            var resource = Console.ReadLine();

            while (resource != "stop")
            {
                var quantity = int.Parse(Console.ReadLine());

                if (!minedResources.ContainsKey(resource))
                {
                    minedResources[resource] = 0;
                }

                minedResources[resource] += quantity;


                resource = Console.ReadLine();
            }

            foreach (var item in minedResources)
            {
                Console.WriteLine($"{item.Key} -> {item.Value}");
            }
        }

3
=============================

static void Main(string[] args)
		{
			Dictionary<string, int> validItems = new Dictionary<string, int>();

			validItems.Add("shards", 0);
			validItems.Add("fragments", 0);
			validItems.Add("motes", 0);

			SortedDictionary<string, int> junkItems = new SortedDictionary<string, int>();
                         // sortira po key
			bool isRunning = true;

			while (isRunning)
			{
				string[] tokens = Console.ReadLine().ToLower().Split();

				for (int i = 0; i < tokens.Length - 1; i += 2) // tokens.Length - 1 po dumi vzima (words) toest (3, motes, 5 stones i t.n) obshto 6 ot purviq primer
				{
					int quantity = int.Parse(tokens[i]); // vzima chisloto - chetno
					string item = tokens[i + 1];         // vzima dumata - nechetno

					if (validItems.ContainsKey(item)) // oshte v nachaloto sme gi vpisali
					{
						validItems[item] += quantity;

						if (validItems[item] >= 250)
						{
							validItems[item] -= 250;
							isRunning = false;

							switch (item)
							{
								case "shards":
									Console.WriteLine("Shadowmourne obtained!");
									break;
								case "fragments":
									Console.WriteLine("Valanyr obtained!");
									break;
								case "motes":
						 			Console.WriteLine("Dragonwrath obtained!");
									break;

							}
							break;
						}

					}
					else
					{
						if (junkItems.ContainsKey(item))
						{
							junkItems[item] += quantity;
						}
						else
						{
							junkItems.Add(item, quantity);
						}
					}

				}
			}

			Dictionary<string, int> sortedItems = validItems 
				.OrderByDescending(x => x.Value)
				.ThenBy(x => x.Key)
				.ToDictionary(k => k.Key, v => v.Value);


			foreach (var sortedItem in sortedItems)
			{
				Console.WriteLine($"{sortedItem.Key}: {sortedItem.Value}");
			}

			foreach (var junkItem in junkItems)
			{
				Console.WriteLine($"{junkItem.Key}: {junkItem.Value}");
			}




		}

++++++++++++++++++++++++++++++++++++++

 static void Main(string[] args)
        {
            var legendaryMats = new Dictionary<string, int>
            {
                { "Shards", 0}, { "Fragments", 0 }, { "Motes", 0 }
            };

            var junkMats = new SortedDictionary<string, int>();
            var legendaryName = string.Empty;

            GetMats(ref legendaryMats, junkMats, ref legendaryName);

            PrintLegendaryFarming(legendaryMats, junkMats, legendaryName);
        }

        static void PrintLegendaryFarming(Dictionary<string, int> legendaryMats,SortedDictionary<string, int> junkMats,string legendaryName)
        {
            Console.WriteLine($"{legendaryName} obtained!");
            foreach (var item in legendaryMats)
            {
                Console.WriteLine($"{item.Key.ToLower()}: {item.Value}");
            }
            foreach (var item in junkMats)
            {
                Console.WriteLine($"{item.Key}: {item.Value}");
            }
        }

        static void GetMats(ref Dictionary<string, int> legendaryMats, SortedDictionary<string, int> junkMats, ref string legendaryName)
        {
            bool isLegendaryObtained = false;

            while (!isLegendaryObtained)
            {
                var inputList = Console.ReadLine().ToLower().Split(' ').ToList();
                var matsNames = inputList.Where((v, i) => i % 2 == 1).ToList(); // numbers.Where((number, index) => number <= index * 10);
                var matsQuantities = inputList.Where((v, i) => i % 2 == 0).Select(int.Parse).ToList(); // vzima chetniq i nechetniq INEDEX! 0, 1, 2

                foreach (var item in matsNames.Zip(matsQuantities, Tuple.Create))
                {
                    bool isMatLegendary = item.Item1 == "shards" || item.Item1 == "fragments" || item.Item1 == "motes";

                    if (isMatLegendary)
                    {
                        var key = char.ToUpper(item.Item1[0]) + item.Item1.Substring(1);

                        //if (!legendaryMats.ContainsKey(key))
                        //{
                        //    legendaryMats[key] = 0; // TOZI IF E NENUJEN V ELSE-A SE PROVERQVA !!
                        //}

                        legendaryMats[key] += item.Item2;

                        if (legendaryMats[key] >= 250)
                        {
                            isLegendaryObtained = true;

                            legendaryName = key == "Shards" ?
                                "Shadowmourne" :
                                key == "Fragments" ?
                                "Valanyr" :
                                key == "Motes" ?
                                "Dragonwrath" :
                                string.Empty;

                            legendaryMats[key] -= 250;

                            legendaryMats = legendaryMats
                                .OrderByDescending(x => x.Value)
                                .ThenBy(k => k.Key)
                                .ToDictionary(k => k.Key, x => x.Value);
                            break;
                        }
                    }
                    else
                    {
                        if (!junkMats.ContainsKey(item.Item1))
                        {
                            junkMats[item.Item1] = 0;
                        }
                        junkMats[item.Item1] += item.Item2;
                    }
                }
            }
        }
4
=============================

var productsDict = new Dictionary<string, double[]>();

			var input = Console.ReadLine();

			while (input != "buy")
			{
				var productInfo = input.Split().ToList();
				var product = productInfo[0];
				var price = double.Parse(productInfo[1]);
				var quantity = int.Parse(productInfo[2]);

				if (!productsDict.ContainsKey(product))
				{
					productsDict[product] = new double[2];
				}

				productsDict[product][0] = price;
				productsDict[product][1] += quantity;

				input = Console.ReadLine();
			}

			foreach (var product in productsDict)
			{
				Console.WriteLine($"{product.Key} -> {(product.Value[0] * product.Value[1]):f2}");
			}


---------------------------------

	        var productsPrices = new Dictionary<string, double>();
			var productsQuantities = new Dictionary<string, int>();
			var input = Console.ReadLine();

			while (input != "buy")
			{
				var productsInfo = input.Split(' ').ToList();
				var product = productsInfo[0];
				var price = double.Parse(productsInfo[1]);
				var quantity = int.Parse(productsInfo[2]);

				if (!productsQuantities.ContainsKey(product))
				{
					productsQuantities[product] = 0;
					productsPrices[product] = 0;
				}
				productsQuantities[product] += quantity;
				productsPrices[product] = price;

				input = Console.ReadLine();
			}

			foreach (var product in productsPrices.Zip(productsQuantities, Tuple.Create))
			{
				var currentProductTotalPrice = product.Item1.Value * product.Item2.Value;
				Console.WriteLine($"{product.Item1.Key} -> {currentProductTotalPrice:f2}");
			}

5
=============================

			int numberOfCommands = int.Parse(Console.ReadLine());
			var registredUsersAndPlates = new Dictionary<string, string>();

			for (int i = 0; i < numberOfCommands; i++)
			{
				string[] tokens = Console.ReadLine().Split().ToArray();
				string user = tokens[1];

				if (tokens[0] == "register")
				{
					string plate = tokens[2];

					if (registredUsersAndPlates.ContainsKey(user))
					{
						Console.WriteLine($"ERROR: already registered with plate number {plate}");
					}
					else
					{
						registredUsersAndPlates[user] = plate;
						Console.WriteLine($"{user} registered {plate} successfully");
					}
				}
				else if (tokens[0] == "unregister")
				{
					if (!registredUsersAndPlates.ContainsKey(user))
					{
						Console.WriteLine($"ERROR: user {user} not found");
						continue;
					}
			
					registredUsersAndPlates.Remove(user);
					Console.WriteLine($"{user} unregistered successfully");									
				}
			}

			foreach (var user in registredUsersAndPlates)
			{
				Console.WriteLine($"{user.Key} => {user.Value}");
			}
6
=============================

	var courses = new Dictionary<string, List<string>>();
			var students = new List<string>();

			string input = Console.ReadLine();

			while (input != "end")
			{
				string[] tokens = input.Split(" : ").ToArray();
				string currentCourse = tokens[0];
				string currentStudent = tokens[1];

				if (!courses.ContainsKey(currentCourse))
				{
					courses[currentCourse] = new List<string>();
				}

				courses[currentCourse].Add(currentStudent);

				input = Console.ReadLine();
			}

			courses = courses
				.OrderByDescending(x => x.Value.Count)
				.ToDictionary(k => k.Key, v => v.Value);

			foreach(var course in courses)
			{
				Console.WriteLine($"{course.Key}: {course.Value.Count}");

				Console.WriteLine(string.Join("\n", course.Value.Select(x => $"-- {x}").OrderBy(x => x)));
			}
7
=============================

int n = int.Parse(Console.ReadLine());
			var students = new Dictionary<string, List<double>>();

			for (int i = 0; i < n; i++)
			{
				string currentStudent = Console.ReadLine();
				double currentGrade = double.Parse(Console.ReadLine());

				if (!students.ContainsKey(currentStudent))
				{
					students[currentStudent] = new List<double>();
				}

				students[currentStudent].Add(currentGrade);
			}

			students = students
				.Where(x => x.Value.Average() >= 4.50)
				.OrderByDescending(x => x.Value.Average())
				.ToDictionary(k => k.Key, v => v.Value);

			foreach(var student in students)
			{
				Console.WriteLine($"{student.Key} -> {student.Value.Average():f2}");
			}	

8
=============================

			var companies = new Dictionary<string, List<string>>();

			while (true)
			{
				string[] tokens = Console.ReadLine().Split(" -> ").ToArray();

				if (tokens[0] == "End")
					break;

				string currentCompany = tokens[0];
				string currentEmployee = tokens[1];

				if (!companies.ContainsKey(currentCompany))
				{
					companies[currentCompany] = new List<string>();
				}

				if (!companies[currentCompany].Contains(currentEmployee))
				{
					companies[currentCompany].Add(currentEmployee);
				}
			}

			companies = companies
				.OrderBy(x => x.Key)
				.ToDictionary(k => k.Key, v => v.Value);

			foreach(var kvp in companies)
			{
				Console.WriteLine(kvp.Key);

				Console.WriteLine(string.Join("\n", kvp.Value.Select(x => $"-- {x}")));
			}

-----------------------------
			var companies = new Dictionary<string, List<string>>();

			while (true)
			{
				var input = Console.ReadLine().Split(" -> ").ToArray();

				if (input[0] == "End")
				{
					companies = companies
						.OrderBy(x => x.Key)
						.ToDictionary(x => x.Key, x => x.Value);

					foreach (var course in companies)
					{
						Console.WriteLine(course.Key);

						for (int i = 0; i < course.Value.Count; i++)
						{
							Console.WriteLine($"-- " + course.Value[i]);
						}
					}

					break;
				}

				string currentCompany = input[0];
				string currentEmployee = input[1];

				if (!companies.ContainsKey(currentCompany))
				{
					companies[currentCompany] = new List<string>();
				}

				if (!companies[currentCompany].Contains(currentEmployee))
				{
					companies[currentCompany].Add(currentEmployee);
				}
			}
9
=============================

var forces = new Dictionary<string, List<string>>();

			string input = Console.ReadLine();

			while (input != "Lumpawaroo")
			{
				var command = input.Split(new string[] { " | ", " -> " }, StringSplitOptions.RemoveEmptyEntries).ToList();
				string currentSide = string.Empty;
				string currentUser = string.Empty;

				if (input.Contains("|"))
				{
					currentSide = command[0];
					currentUser = command[1];

					if (!forces.ContainsKey(currentSide))
					{
						forces[currentSide] = new List<string>();
					}

                                        bool isContains = forces.Any(x => x.Value.Contains(currentUser));

					if (!forces[currentSide].Contains(currentUser) && isContains == false)
					{
						forces[currentSide].Add(currentUser);
					}
				}
				else if (input.Contains("->"))
				{
					currentUser = command[0];
					currentSide = command[1];

					foreach (var side in forces)
					{
						if (side.Value.Contains(currentUser))
						{
							side.Value.Remove(currentUser);
							break;
						}
					}

					if (!forces.ContainsKey(currentSide))
					{
						forces[currentSide] = new List<string>();
					}

					if (!forces[currentSide].Contains(currentUser))
					{
						forces[currentSide].Add(currentUser);
					}

					Console.WriteLine($"{currentUser} joins the {currentSide} side!");
				}

				input = Console.ReadLine();
			}

			var sortedForces = forces
				.OrderByDescending(x => x.Value.Count)
				.ThenBy(x => x.Key)
				.ToDictionary(k => k.Key, v => v.Value);

			foreach (var force in sortedForces)
			{
				if (force.Value.Count == 0)
					continue;

				Console.WriteLine($"Side: {force.Key}, Members: {force.Value.Count}");

				Console.WriteLine(string.Join("\n", force.Value.Select(x => $"! {x}").OrderBy(x => x)));
			}

10
=============================

var studentsAndPoints = new Dictionary<string, int>();
			var submissions = new Dictionary<string, int>();

			string input = Console.ReadLine();

			while (input != "exam finished")
			{
				string[] tokens = input.Split("-");

				string name = tokens[0];

				if (tokens[1] == "banned")
				{
					studentsAndPoints.Remove(name);
				}
				else
				{
					string language = tokens[1];
					int points = int.Parse(tokens[2]);

					if (!studentsAndPoints.ContainsKey(name))
					{
						studentsAndPoints[name] = points;
					}
					else if(points > studentsAndPoints[name])
					{
						studentsAndPoints[name] = points;
					}

					if (!submissions.ContainsKey(language))
					{
						submissions[language] = 0;
					}

					submissions[language]++;
				}

				input = Console.ReadLine();
			}
			
			Console.WriteLine("Results:");

			foreach(var kvp in studentsAndPoints
				.OrderByDescending(x => x.Value).ThenBy(x => x.Key))
			{
				Console.WriteLine($"{kvp.Key} | {kvp.Value}");
			}

			Console.WriteLine("Submissions:");

			foreach (var kvp in submissions
				.OrderByDescending(x => x.Value).ThenBy(x => x.Key))
			{
				Console.WriteLine($"{kvp.Key} - {kvp.Value}");
			}